/* Generated By:JavaCC: Do not edit this line. simplejava.java */
public class simplejava implements simplejavaConstants {

  static final public ASTProgram program() throws ParseException {
  ASTClasses classes = new ASTClasses(); ASTClass class1 ; ASTFunctionDefinitions functions = new ASTFunctionDefinitions(); ASTFunctionDefinition function1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      class1 = classDefinition();
                                      classes.addElement(class1);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case VOID:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      function1 = functionDeclaration();
                                             functions.addElement(function1);
    }
    jj_consume_token(0);
                                                                                         {if (true) return new ASTProgram(classes, functions, 0);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTClass classDefinition() throws ParseException {
 Token name; ASTInstanceVariableDefs varDefs = new ASTInstanceVariableDefs(); ASTInstanceVariableDef varDef; Token line;
    line = jj_consume_token(CLASS);
    name = jj_consume_token(ID);
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      varDef = variableDefinition();
      jj_consume_token(SEMICOLON);
                                                                                          varDefs.addElement(varDef);
    }
    jj_consume_token(RBRACE);
                                                                                                                                    {if (true) return new ASTClass(name.image, varDefs, line.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionDefinition functionDeclaration() throws ParseException {
 Token t; Token name; ASTFormals formals = new ASTFormals(); ASTFormal formal; ASTStatement body; ASTStatements bodys = new ASTStatements();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      t = jj_consume_token(VOID);
      break;
    case INT:
    case BOOLEAN:
    case ID:
      t = type();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case ID:
      formal = formal_parameter();
                                                                                       formals.addElement(formal);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        formal = formal_parameter();
                                                                                                                                                          formals.addElement(formal);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                      {if (true) return new ASTPrototype(t.image, name.image, formals, t.beginLine);}
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DO:
        case FOR:
        case IF:
        case WHILE:
        case RETURN:
        case INT:
        case BOOLEAN:
        case SEMICOLON:
        case LBRACE:
        case ID:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        body = statement();
                                                                                                                            bodys.addElement(body);
      }
      jj_consume_token(RBRACE);
                                                                                                                                                                 {if (true) return new ASTFunction(t.image, name.image, formals, bodys, t.beginLine);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTInstanceVariableDef variableDefinition() throws ParseException {
 Token type; Token name; int arraydimension = 0;
    type = type();
    name = jj_consume_token(ID);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
                                                                               arraydimension++;
    }
                                                                                                     {if (true) return new ASTInstanceVariableDef(type.image, name.image, arraydimension, type.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormal formal_parameter() throws ParseException {
 Token t; Token name; int arraydimension = 0;
    t = type();
    name = jj_consume_token(ID);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
                                                                            arraydimension++;
    }
                                                                                                  {if (true) return new ASTFormal(t.image, name.image, arraydimension, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public Token type() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
                   {if (true) return t;}
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                       {if (true) return t;}
      break;
    case ID:
      t = jj_consume_token(ID);
                  {if (true) return t;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression expression() throws ParseException {
 Token type; Token t; ASTExpression elements; int arraydimension = 0; ASTExpression result; Token line;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      line = jj_consume_token(NEW);
      if (jj_2_1(2)) {
        type = jj_consume_token(ID);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
                                                                   {if (true) return new ASTNewClassExpression(type.image, line.beginLine);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case ID:
          t = type();
          jj_consume_token(LBRACKET);
          elements = mathExpression();
          jj_consume_token(RBRACKET);
                                                                                                                                                                                                    arraydimension++;
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[13] = jj_gen;
              break label_8;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
                                                                                                                                                                                                                                                  arraydimension++;
          }
                                                                                                                                                                                                                                                                         {if (true) return new ASTNewArrayExpression(t.image, elements, arraydimension, line.beginLine);}
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case FALSE:
    case TRUE:
    case MINUS:
    case INTEGER_LITERAL:
    case LPAREN:
    case NOT:
    case ID:
      result = operatorExpression();
                                       {if (true) return result;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression operatorExpression() throws ParseException {
 Token t; ASTExpression result; ASTExpression rhs;
    result = and();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      t = jj_consume_token(OR);
      rhs = and();
                                               result = new ASTOperatorExpression(result, rhs, t.image, result.line() );
    }
                                                                                                                              {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression and() throws ParseException {
 Token t; ASTExpression result; ASTExpression rhs;
    result = unary();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      t = jj_consume_token(AND);
      rhs = unary();
                                                    result = new ASTOperatorExpression(result, rhs, t.image, result.line() );
    }
                                                                                                                                   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression unary() throws ParseException {
 Token t; ASTExpression result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      result = booleanBinaryop();
                                              {if (true) return new ASTUnaryOperatorExpression(result, t.image, t.beginLine);}
      break;
    case FALSE:
    case TRUE:
    case MINUS:
    case INTEGER_LITERAL:
    case LPAREN:
    case ID:
      result = booleanBinaryop();
                                    {if (true) return result;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression booleanBinaryop() throws ParseException {
 Token t; ASTExpression result; ASTExpression rhs;
    result = mathExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case NEQUAL:
    case LESS:
    case GREATER:
    case LESSE:
    case GREATERE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        t = jj_consume_token(EQUAL);
        break;
      case NEQUAL:
        t = jj_consume_token(NEQUAL);
        break;
      case LESS:
        t = jj_consume_token(LESS);
        break;
      case GREATER:
        t = jj_consume_token(GREATER);
        break;
      case LESSE:
        t = jj_consume_token(LESSE);
        break;
      case GREATERE:
        t = jj_consume_token(GREATERE);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = mathExpression();
                                                                                                                                                 result = new ASTOperatorExpression(result, rhs, t.image, result.line());
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                                                                                                                                                                                                                               {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression mathExpression() throws ParseException {
  Token t; ASTExpression result; ASTExpression rhs;
    result = term();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = term();
                                                              result = new ASTOperatorExpression(result, rhs, t.image, result.line() );
    }
                                                                                                                                              {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression term() throws ParseException {
  Token t; ASTExpression result; ASTExpression rhs;
    result = factor();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = factor();
                                                                       result = new ASTOperatorExpression(result, rhs, t.image, result.line() );
    }
                                                                                                                                                       {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression factor() throws ParseException {
  ASTExpression value; Token t; ASTExpression formal; ASTFunctionCallExpression result; ASTVariable variable; Token line;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      line = jj_consume_token(MINUS);
      value = factor();
                                      {if (true) return new ASTOperatorExpression(new ASTIntegerLiteral(0, line.beginLine), value, ASTOperatorExpression.MINUS, value.line());}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                            {if (true) return new ASTIntegerLiteral(Integer.parseInt(t.image), t.beginLine);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      value = expression();
      jj_consume_token(RPAREN);
                                            {if (true) return value;}
      break;
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_2(2)) {
        t = jj_consume_token(ID);
        jj_consume_token(LPAREN);
                                        result = new ASTFunctionCallExpression(t.image, t.beginLine);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case TRUE:
        case NEW:
        case MINUS:
        case INTEGER_LITERAL:
        case LPAREN:
        case NOT:
        case ID:
          formal = expression();
                                                                                                                                result.addElement(formal);
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[25] = jj_gen;
              break label_13;
            }
            jj_consume_token(COMMA);
            formal = expression();
                                                                                                                                                                                            result.addElement(formal);
          }
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
                                                                                                                                                                                                                                      {if (true) return result;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          variable = variable();
                               {if (true) return new ASTVariableExpression(variable, variable.line());}
          break;
        case TRUE:
          t = jj_consume_token(TRUE);
                     {if (true) return new ASTBooleanLiteral(Boolean.valueOf(t.image), t.beginLine);}
          break;
        case FALSE:
          t = jj_consume_token(FALSE);
                     {if (true) return new ASTBooleanLiteral(Boolean.valueOf(t.image), t.beginLine);}
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariable variable() throws ParseException {
 Token t1; Token t2; ASTVariable result; ASTExpression index;
    t1 = jj_consume_token(ID);
                   result = new ASTBaseVariable(t1.image, t1.beginLine);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        t2 = jj_consume_token(ID);
                                                                                              result = new ASTClassVariable(result, t2.image, t1.beginLine);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        index = mathExpression();
        jj_consume_token(RBRACKET);
                                                                                                                                                                                                                result = new ASTArrayVariable(result, index, t1.beginLine);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                                                                                                                                                                                                                                                 {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement statement() throws ParseException {
  ASTStatement result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      result = sequentialStatementBlocks();
                                              {if (true) return result;}
      break;
    case IF:
      result = ifStatement();
                                {if (true) return result;}
      break;
    case WHILE:
      result = whileStatement();
                                   {if (true) return result;}
      break;
    case DO:
      result = doWhileStatement();
                                     {if (true) return result;}
      break;
    case FOR:
      result = forStatement();
                                  {if (true) return result;}
      break;
    case SEMICOLON:
      result = emptyStatement();
                                   {if (true) return result;}
      break;
    case RETURN:
      result = returnStatement();
                                    {if (true) return result;}
      break;
    default:
      jj_la1[31] = jj_gen;
      if (jj_2_3(2)) {
        result = assignmentStatement();
        jj_consume_token(SEMICOLON);
                                                                 {if (true) return result;}
      } else if (jj_2_4(2)) {
        result = functionCallStatement();
                                                       {if (true) return result;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case ID:
          result = variableDeclarationStatement();
          jj_consume_token(SEMICOLON);
                                                             {if (true) return result;}
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement sequentialStatementBlocks() throws ParseException {
  ASTStatement body; ASTStatements bodys = new ASTStatements(); Token line;
    jj_consume_token(LBRACE);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DO:
      case FOR:
      case IF:
      case WHILE:
      case RETURN:
      case INT:
      case BOOLEAN:
      case SEMICOLON:
      case LBRACE:
      case ID:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_15;
      }
      body = statement();
                                       bodys.addElement(body);
    }
    jj_consume_token(RBRACE);
                                                                            {if (true) return bodys;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement assignmentStatement() throws ParseException {
  ASTVariable variable = null; ASTExpression expression; Token t;
    variable = variable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      jj_consume_token(PLUS);
                                    {if (true) return new ASTAssignmentStatement(variable, new ASTOperatorExpression(new ASTVariableExpression(variable, variable.line()), new ASTIntegerLiteral(1, variable.line()), t.image, variable.line() ), variable.line() );}
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      jj_consume_token(MINUS);
                                {if (true) return new ASTAssignmentStatement(variable, new ASTOperatorExpression(new ASTVariableExpression(variable, variable.line()), new ASTIntegerLiteral(1, variable.line()), t.image, variable.line() ), variable.line() );}
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expression = expression();
                                                  {if (true) return new ASTAssignmentStatement(variable,expression, variable.line());}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement variableDeclarationStatement() throws ParseException {
 ASTVariableDefStatement result; ASTExpression init; Token type; Token name; int arraydimension = 0;
    type = type();
    name = jj_consume_token(ID);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_16;
      }
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
                                                                               arraydimension++;
    }
                                                                                                     result = new ASTVariableDefStatement(type.image, name.image, arraydimension, type.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      init = expression();
                                                                                                                                                                                                                                    result.setinit(init);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
                                                                                                                                                                                                                                                                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement ifStatement() throws ParseException {
 ASTExpression test; ASTStatement thenstatement;  ASTStatement elsestatement = null; Token line;
    line = jj_consume_token(IF);
    jj_consume_token(LPAREN);
    test = expression();
    jj_consume_token(RPAREN);
    thenstatement = statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elsestatement = statement();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
                                                                                                                                           {if (true) return new ASTIfStatement(test, thenstatement, elsestatement, line.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement whileStatement() throws ParseException {
 ASTExpression test; ASTStatement body; Token line;
    line = jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    test = expression();
    jj_consume_token(RPAREN);
    body = statement();
                                                                                 {if (true) return new ASTWhileStatement(test, body, line.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement doWhileStatement() throws ParseException {
 ASTExpression test; ASTStatement body; Token line;
    line = jj_consume_token(DO);
    body = statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    test = expression();
    jj_consume_token(RPAREN);
                                                                                       {if (true) return new ASTDoWhileStatement(test, body, line.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement forStatement() throws ParseException {
 ASTStatement initialize; ASTExpression test; ASTStatement increment = null; ASTStatement body; Token line; Token t;
    line = jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    initialize = forInitialization();
    test = expression();
    t = jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case ID:
      increment = forIncrement();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    body = statement();
                                                                                                                                                               {if (true) return new ASTForStatement(initialize, test,increment, body, line.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement forInitialization() throws ParseException {
 ASTStatement result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      result = emptyStatement();
                                   {if (true) return result;}
      break;
    default:
      jj_la1[40] = jj_gen;
      if (jj_2_5(2)) {
        result = assignmentStatement();
        jj_consume_token(SEMICOLON);
                                                                 {if (true) return result;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case ID:
          result = variableDeclarationStatement();
          jj_consume_token(SEMICOLON);
                                                             {if (true) return result;}
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement forIncrement() throws ParseException {
 ASTStatement result;
    if (jj_2_6(2)) {
      result = assignmentStatement();
                                                      {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case ID:
        result = variableDeclarationStatement();
                                                  {if (true) return result;}
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement functionCallStatement() throws ParseException {
 Token name; ASTExpression formal; ASTFunctionCallStatement result;
    name = jj_consume_token(ID);
    jj_consume_token(LPAREN);
                              result = new ASTFunctionCallStatement(name.image, name.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case NEW:
    case MINUS:
    case INTEGER_LITERAL:
    case LPAREN:
    case NOT:
    case ID:
      formal = expression();
                                                                                                                          result.addElement(formal);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        formal = expression();
                                                                                                                                                                                      result.addElement(formal);
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                                                                                                                                                                                                                                             {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement returnStatement() throws ParseException {
 ASTExpression value = null; Token line;
    line = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case NEW:
    case MINUS:
    case INTEGER_LITERAL:
    case LPAREN:
    case NOT:
    case ID:
      value = expression();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                                             {if (true) return new ASTReturnStatement(value,line.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement emptyStatement() throws ParseException {
 Token line;
    line = jj_consume_token(SEMICOLON);
                            {if (true) return new ASTEmptyStatement(line.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public simplejavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0xe00000,0x600000,0xe00000,0x0,0x600000,0x806cc800,0x80000000,0x0,0x40000000,0x0,0x40000000,0x600000,0x0,0x600000,0x48122000,0x0,0x0,0x48022000,0x0,0x0,0xc000000,0xc000000,0x30000000,0x30000000,0x0,0x48122000,0x48000000,0x22000,0x0,0x0,0x800cc800,0x600000,0x806cc800,0xc000000,0x0,0x40000000,0x0,0x1000,0x600000,0x80000000,0x600000,0x600000,0x0,0x48122000,0x48122000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80000,0x80000,0x80000,0x80,0x80000,0x80010,0x10,0x4,0x0,0x4,0x0,0x80000,0x4,0x80000,0xa0001,0x10000,0x8000,0xa0001,0x7e00,0x7e00,0x0,0x0,0x0,0x0,0x80,0xa0001,0x1,0x80000,0x44,0x44,0x10,0x80000,0x80010,0x100,0x4,0x0,0x100,0x0,0x80000,0x0,0x80000,0x80000,0x80,0xa0001,0xa0001,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public simplejava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public simplejava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public simplejava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public simplejava(simplejavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(simplejavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
